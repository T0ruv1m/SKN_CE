import os
import json
from datetime import datetime
from config_tools import DIR, EmptyFileMaker



def get_file_metadata(file_path):
    """Retrieve the last modification timestamp and file name of a file."""
    try:
        # Get the last modification time
        mtime = os.path.getmtime(file_path)
        # Convert timestamp to a readable format
        timestamp = datetime.fromtimestamp(mtime).isoformat()
        # Get the file name
        file_name = os.path.basename(file_path)
        return file_name, file_path, timestamp
    except Exception as e:
        print(f"Error retrieving metadata for file {file_path}: {e}")
        return None, None, None

def accumulate_file_timestamps(directory):
    """Recursively accumulate file names, paths, and timestamps from a directory."""
    file_details = []

    for root, dirs, files in os.walk(directory):
        for file in files:
            if file.lower().endswith('.xml'):
                file_path = os.path.join(root, file)
                file_name, file_path, timestamp = get_file_metadata(file_path)
                if timestamp:
                    file_details.append({
                        'file_name': file_name,
                        'file_path': file_path,
                        'timestamp': timestamp
                    })

    return file_details

def total_read(file_details, json_file):
    """Save accumulated file details to a JSON file."""
    try:
        with open(json_file, 'w') as f:
            json.dump(file_details, f, indent=4)
        print(f"File details saved to: {json_file}")
    except Exception as e:
        print(f"Error saving JSON file: {e}")

if __name__ == "__main__":
    path_to = DIR()
    file_details = accumulate_file_timestamps(path_to.xml_files)

    try:
        # Open the file in read mode
        with open(path_to.timestamp, 'r') as file:
            # Read the content of the file
            content = file.read()
            
            # Check if the content is None or empty
            if content == "":
                total_read(file_details, path_to.json_object)
                print("Leitura total completa!")
            else:
                print(f"File content: {content}")

    except FileNotFoundError:
        print(f"The file {path_to.timestamp} does not exist.")
    except Exception as e:
        print(f"An error occurred: {e}")
